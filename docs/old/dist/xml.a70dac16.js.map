{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","qualifiedName","tokenizer","root","include","token","next","cdata","tag","whitespace","comment"],"mappings":"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","file":"xml.a70dac16.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->'],\r\n    },\r\n    brackets: [\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '\"', close: '\"' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n        { open: '\"', close: '\"' },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.xml',\r\n    ignoreCase: true,\r\n    // Useful regular expressions\r\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[^<&]+/, ''],\r\n            { include: '@whitespace' },\r\n            // Standard opening tag\r\n            [/(<)(@qualifiedName)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'tag', next: '@tag' }\r\n                ]],\r\n            // Standard closing tag\r\n            [/(<\\/)(@qualifiedName)(\\s*)(>)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'tag' },\r\n                    '',\r\n                    { token: 'delimiter' }\r\n                ]],\r\n            // Meta tags - instruction\r\n            [/(<\\?)(@qualifiedName)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'metatag', next: '@tag' }\r\n                ]],\r\n            // Meta tags - declaration\r\n            [/(<\\!)(@qualifiedName)/, [\r\n                    { token: 'delimiter' },\r\n                    { token: 'metatag', next: '@tag' }\r\n                ]],\r\n            // CDATA\r\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\r\n            [/&\\w+;/, 'string.escape'],\r\n        ],\r\n        cdata: [\r\n            [/[^\\]]+/, ''],\r\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\r\n            [/\\]/, '']\r\n        ],\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']],\r\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']],\r\n            [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']],\r\n            [/@qualifiedName/, 'attribute.name'],\r\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\r\n            [/(\\/)(>)/, [\r\n                    { token: 'tag' },\r\n                    { token: 'delimiter', next: '@pop' }\r\n                ]],\r\n            [/>/, { token: 'delimiter', next: '@pop' }],\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/<!--/, { token: 'comment', next: '@comment' }]\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, { token: 'comment', next: '@pop' }],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ],\r\n    },\r\n};\r\n"]}