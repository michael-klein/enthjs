{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/rust/rust.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","defaultToken","keywords","typeKeywords","constants","supportConstants","supportMacros","operators","escapes","delimiters","symbols","intSuffixes","floatSuffixes","tokenizer","root","cases","token","bracket","next","include","whitespace","comment","string","numbers"],"mappings":"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","file":"rust.0262dbaa.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '[', close: ']' },\r\n        { open: '{', close: '}' },\r\n        { open: '(', close: ')' },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\r\n            end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.rust',\r\n    defaultToken: 'invalid',\r\n    keywords: [\r\n        'as', 'box', 'break', 'const', 'continue', 'crate', 'else', 'enum',\r\n        'extern', 'false', 'fn', 'for', 'if', 'impl', 'in', 'let', 'loop',\r\n        'match', 'mod', 'move', 'mut', 'pub', 'ref', 'return', 'self',\r\n        'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use',\r\n        'where', 'while', 'catch', 'default', 'union', 'static', 'abstract',\r\n        'alignof', 'become', 'do', 'final', 'macro', 'offsetof', 'override',\r\n        'priv', 'proc', 'pure', 'sizeof', 'typeof', 'unsized', 'virtual',\r\n        'yield',\r\n    ],\r\n    typeKeywords: [\r\n        'Self', 'm32', 'm64', 'm128', 'f80', 'f16', 'f128', 'int', 'uint',\r\n        'float', 'char', 'bool', 'u8', 'u16', 'u32', 'u64', 'f32', 'f64', 'i8',\r\n        'i16', 'i32', 'i64', 'str', 'Option', 'Either', 'c_float', 'c_double',\r\n        'c_void', 'FILE', 'fpos_t', 'DIR', 'dirent', 'c_char', 'c_schar',\r\n        'c_uchar', 'c_short', 'c_ushort', 'c_int', 'c_uint', 'c_long',\r\n        'c_ulong', 'size_t', 'ptrdiff_t', 'clock_t', 'time_t', 'c_longlong',\r\n        'c_ulonglong', 'intptr_t', 'uintptr_t', 'off_t', 'dev_t', 'ino_t',\r\n        'pid_t', 'mode_t', 'ssize_t',\r\n    ],\r\n    constants: [\r\n        'true', 'false', 'Some', 'None', 'Left', 'Right', 'Ok', 'Err',\r\n    ],\r\n    supportConstants: [\r\n        'EXIT_FAILURE', 'EXIT_SUCCESS', 'RAND_MAX', 'EOF', 'SEEK_SET',\r\n        'SEEK_CUR', 'SEEK_END', '_IOFBF', '_IONBF', '_IOLBF', 'BUFSIZ',\r\n        'FOPEN_MAX', 'FILENAME_MAX', 'L_tmpnam', 'TMP_MAX', 'O_RDONLY',\r\n        'O_WRONLY', 'O_RDWR', 'O_APPEND', 'O_CREAT', 'O_EXCL', 'O_TRUNC',\r\n        'S_IFIFO', 'S_IFCHR', 'S_IFBLK', 'S_IFDIR', 'S_IFREG', 'S_IFMT',\r\n        'S_IEXEC', 'S_IWRITE', 'S_IREAD', 'S_IRWXU', 'S_IXUSR', 'S_IWUSR',\r\n        'S_IRUSR', 'F_OK', 'R_OK', 'W_OK', 'X_OK', 'STDIN_FILENO',\r\n        'STDOUT_FILENO', 'STDERR_FILENO',\r\n    ],\r\n    supportMacros: [\r\n        'format!', 'print!', 'println!', 'panic!', 'format_args!', 'unreachable!',\r\n        'write!', 'writeln!'\r\n    ],\r\n    operators: [\r\n        '!', '!=', '%', '%=', '&', '&=', '&&', '*', '*=', '+', '+=', '-', '-=',\r\n        '->', '.', '..', '...', '/', '/=', ':', ';', '<<', '<<=', '<', '<=', '=',\r\n        '==', '=>', '>', '>=', '>>', '>>=', '@', '^', '^=', '|', '|=', '||', '_',\r\n        '?', '#'\r\n    ],\r\n    escapes: /\\\\([nrt0\\\"''\\\\]|x\\h{2}|u\\{\\h{1,6}\\})/,\r\n    delimiters: /[,]/,\r\n    symbols: /[\\#\\!\\%\\&\\*\\+\\-\\.\\/\\:\\;\\<\\=\\>\\@\\^\\|_\\?]+/,\r\n    intSuffixes: /[iu](8|16|32|64|128|size)/,\r\n    floatSuffixes: /f(32|64)/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[a-zA-Z][a-zA-Z0-9_]*!?|_[a-zA-Z0-9_]+/,\r\n                {\r\n                    cases: {\r\n                        '@typeKeywords': 'keyword.type',\r\n                        '@keywords': 'keyword',\r\n                        '@supportConstants': 'keyword',\r\n                        '@supportMacros': 'keyword',\r\n                        '@constants': 'keyword',\r\n                        '@default': 'identifier',\r\n                    }\r\n                }\r\n            ],\r\n            // Designator\r\n            [/\\$/, 'identifier'],\r\n            // Lifetime annotations\r\n            [/'[a-zA-Z_][a-zA-Z0-9_]*(?=[^\\'])/, 'identifier'],\r\n            // Byte literal\r\n            [/'\\S'/, 'string.byteliteral'],\r\n            // Strings\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\r\n            { include: '@numbers' },\r\n            // Whitespace + comments\r\n            { include: '@whitespace' },\r\n            [/@delimiters/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'delimiter'\r\n                    }\r\n                }],\r\n            [/[{}()\\[\\]<>]/, '@brackets'],\r\n            [/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\/\\*/, 'comment', '@push'],\r\n            [\"\\\\*/\", 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        numbers: [\r\n            //Octal\r\n            [/(0o[0-7_]+)(@intSuffixes)?/, { token: 'number' }],\r\n            //Binary\r\n            [/(0b[0-1_]+)(@intSuffixes)?/, { token: 'number' }],\r\n            //Exponent\r\n            [/[\\d][\\d_]*(\\.[\\d][\\d_]*)?[eE][+-][\\d_]+(@floatSuffixes)?/, { token: 'number' }],\r\n            //Float\r\n            [/\\b(\\d\\.?[\\d_]*)(@floatSuffixes)?\\b/, { token: 'number' }],\r\n            //Hexadecimal\r\n            [/(0x[\\da-fA-F]+)_?(@intSuffixes)?/, { token: 'number' }],\r\n            //Integer\r\n            [/[\\d][\\d_]*(@intSuffixes?)?/, { token: 'number' }],\r\n        ]\r\n    }\r\n};\r\n"]}