{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","tokenPostfix","keywords","keywordops","builtins","declarations","linedecls","operators","token","symbols","escape","escapes","decpart","decimal","delim","heredelim","regexpctl","regexpesc","tokenizer","root","cases","next","include","dodecl","switchTo","modifier","sstring","dstring","heredoc","interpolated","interpolated_compound","pregexp","regexp","regexcontrol","regexrange","regexpcomment","pstring","qstring","qqstring","whitespace","comment"],"mappings":"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","file":"ruby.505774d9.js","sourceRoot":"..","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '#',\r\n        blockComment: ['=begin', '=end'],\r\n    },\r\n    brackets: [\r\n        ['(', ')'],\r\n        ['{', '}'],\r\n        ['[', ']']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|\\'|\\/).*\\\\4)*(#.*)?$'),\r\n        decreaseIndentPattern: new RegExp('^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)'),\r\n    }\r\n};\r\n/*\r\n * Ruby language definition\r\n *\r\n * Quite a complex language due to elaborate escape sequences\r\n * and quoting of literate strings/regular expressions, and\r\n * an 'end' keyword that does not always apply to modifiers like until and while,\r\n * and a 'do' keyword that sometimes starts a block, but sometimes is part of\r\n * another statement (like 'while').\r\n *\r\n * (1) end blocks:\r\n * 'end' may end declarations like if or until, but sometimes 'if' or 'until'\r\n * are modifiers where there is no 'end'. Also, 'do' sometimes starts a block\r\n * that is ended by 'end', but sometimes it is part of a 'while', 'for', or 'until'\r\n * To do proper brace matching we do some elaborate state manipulation.\r\n * some examples:\r\n *\r\n *   until bla do\r\n *     work until tired\r\n *     list.each do\r\n *       something if test\r\n *     end\r\n *   end\r\n *\r\n * or\r\n *\r\n * if test\r\n *  something (if test then x end)\r\n *  bar if bla\r\n * end\r\n *\r\n * or, how about using class as a property..\r\n *\r\n * class Test\r\n *   def endpoint\r\n *     self.class.endpoint || routes\r\n *   end\r\n * end\r\n *\r\n * (2) quoting:\r\n * there are many kinds of strings and escape sequences. But also, one can\r\n * start many string-like things as '%qx' where q specifies the kind of string\r\n * (like a command, escape expanded, regular expression, symbol etc.), and x is\r\n * some character and only another 'x' ends the sequence. Except for brackets\r\n * where the closing bracket ends the sequence.. and except for a nested bracket\r\n * inside the string like entity. Also, such strings can contain interpolated\r\n * ruby expressions again (and span multiple lines). Moreover, expanded\r\n * regular expression can also contain comments.\r\n */\r\nexport var language = {\r\n    tokenPostfix: '.ruby',\r\n    keywords: [\r\n        '__LINE__', '__ENCODING__', '__FILE__', 'BEGIN', 'END', 'alias', 'and', 'begin',\r\n        'break', 'case', 'class', 'def', 'defined?', 'do', 'else', 'elsif', 'end',\r\n        'ensure', 'for', 'false', 'if', 'in', 'module', 'next', 'nil', 'not', 'or', 'redo',\r\n        'rescue', 'retry', 'return', 'self', 'super', 'then', 'true', 'undef', 'unless',\r\n        'until', 'when', 'while', 'yield',\r\n    ],\r\n    keywordops: [\r\n        '::', '..', '...', '?', ':', '=>'\r\n    ],\r\n    builtins: [\r\n        'require', 'public', 'private', 'include', 'extend', 'attr_reader',\r\n        'protected', 'private_class_method', 'protected_class_method', 'new'\r\n    ],\r\n    // these are closed by 'end' (if, while and until are handled separately)\r\n    declarations: [\r\n        'module', 'class', 'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n    ],\r\n    linedecls: [\r\n        'def', 'case', 'do', 'begin', 'for', 'if', 'while', 'until', 'unless'\r\n    ],\r\n    operators: [\r\n        '^', '&', '|', '<=>', '==', '===', '!~', '=~', '>', '>=', '<', '<=', '<<', '>>', '+',\r\n        '-', '*', '/', '%', '**', '~', '+@', '-@', '[]', '[]=', '`',\r\n        '+=', '-=', '*=', '**=', '/=', '^=', '%=', '<<=', '>>=', '&=', '&&=', '||=', '|='\r\n    ],\r\n    brackets: [\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' }\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\r\n    // escape sequences\r\n    escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\r\n    escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\r\n    decpart: /\\d(_?\\d)*/,\r\n    decimal: /0|@decpart/,\r\n    delim: /[^a-zA-Z0-9\\s\\n\\r]/,\r\n    heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\r\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\r\n    regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        // Main entry.\r\n        // root.<decl> where decl is the current opening declaration (like 'class')\r\n        root: [\r\n            // identifiers and keywords\r\n            // most complexity here is due to matching 'end' correctly with declarations.\r\n            // We distinguish a declaration that comes first on a line, versus declarations further on a line (which are most likey modifiers)\r\n            [/^(\\s*)([a-z_]\\w*[!?=]?)/, ['white',\r\n                    {\r\n                        cases: {\r\n                            'for|until|while': { token: 'keyword.$2', next: '@dodecl.$2' },\r\n                            '@declarations': { token: 'keyword.$2', next: '@root.$2' },\r\n                            'end': { token: 'keyword.$S2', next: '@pop' },\r\n                            '@keywords': 'keyword',\r\n                            '@builtins': 'predefined',\r\n                            '@default': 'identifier'\r\n                        }\r\n                    }]],\r\n            [/[a-z_]\\w*[!?=]?/,\r\n                {\r\n                    cases: {\r\n                        'if|unless|while|until': { token: 'keyword.$0x', next: '@modifier.$0x' },\r\n                        'for': { token: 'keyword.$2', next: '@dodecl.$2' },\r\n                        '@linedecls': { token: 'keyword.$0', next: '@root.$0' },\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            [/[A-Z][\\w]*[!?=]?/, 'constructor.identifier'],\r\n            [/\\$[\\w]*/, 'global.constant'],\r\n            [/@[\\w]*/, 'namespace.instance.identifier'],\r\n            [/@@[\\w]*/, 'namespace.class.identifier'],\r\n            // here document\r\n            [/<<[-~](@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            [/^<<(@heredelim).*/, { token: 'string.heredoc.delimiter', next: '@heredoc.$1' }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // strings\r\n            [/\"/, { token: 'string.d.delim', next: '@dstring.d.\"' }],\r\n            [/'/, { token: 'string.sq.delim', next: '@sstring.sq' }],\r\n            // % literals. For efficiency, rematch in the 'pstring' state\r\n            [/%([rsqxwW]|Q?)/, { token: '@rematch', next: 'pstring' }],\r\n            // commands and symbols\r\n            [/`/, { token: 'string.x.delim', next: '@dstring.x.`' }],\r\n            [/:(\\w|[$@])\\w*[!?=]?/, 'string.s'],\r\n            [/:\"/, { token: 'string.s.delim', next: '@dstring.s.\"' }],\r\n            [/:'/, { token: 'string.s.delim', next: '@sstring.s' }],\r\n            // regular expressions. Lookahead for a (not escaped) closing forwardslash on the same line\r\n            [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: 'regexp.delim', next: '@regexp' }],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@keywordops': 'keyword',\r\n                        '@operators': 'operator',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            [/[;,]/, 'delimiter'],\r\n            // numbers\r\n            [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, 'number.hex'],\r\n            [/0[_oO][0-7](_?[0-7])*/, 'number.octal'],\r\n            [/0[bB][01](_?[01])*/, 'number.binary'],\r\n            [/0[dD]@decpart/, 'number'],\r\n            [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/, {\r\n                    cases: {\r\n                        '$1': 'number.float',\r\n                        '@default': 'number'\r\n                    }\r\n                }],\r\n        ],\r\n        // used to not treat a 'do' as a block opener if it occurs on the same\r\n        // line as a 'do' statement: 'while|until|for'\r\n        // dodecl.<decl> where decl is the declarations started, like 'while'\r\n        dodecl: [\r\n            [/^/, { token: '', switchTo: '@root.$S2' }],\r\n            [/[a-z_]\\w*[!?=]?/, {\r\n                    cases: {\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        'do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@root' }\r\n        ],\r\n        // used to prevent potential modifiers ('if|until|while|unless') to match\r\n        // with 'end' keywords.\r\n        // modifier.<decl>x where decl is the declaration starter, like 'if'\r\n        modifier: [\r\n            [/^/, '', '@pop'],\r\n            [/[a-z_]\\w*[!?=]?/, {\r\n                    cases: {\r\n                        'end': { token: 'keyword.$S2', next: '@pop' },\r\n                        'then|else|elsif|do': { token: 'keyword', switchTo: '@root.$S2' },\r\n                        '@linedecls': { token: '@rematch', switchTo: '@root.$S2' },\r\n                        '@keywords': 'keyword',\r\n                        '@builtins': 'predefined',\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            { include: '@root' }\r\n        ],\r\n        // single quote strings (also used for symbols)\r\n        // sstring.<kind>  where kind is 'sq' (single quote) or 's' (symbol)\r\n        sstring: [\r\n            [/[^\\\\']+/, 'string.$S2'],\r\n            [/\\\\\\\\|\\\\'|\\\\$/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.invalid'],\r\n            [/'/, { token: 'string.$S2.delim', next: '@pop' }]\r\n        ],\r\n        // double quoted \"string\".\r\n        // dstring.<kind>.<delim> where kind is 'd' (double quoted), 'x' (command), or 's' (symbol)\r\n        // and delim is the ending delimiter (\" or `)\r\n        dstring: [\r\n            [/[^\\\\`\"#]+/, 'string.$S2'],\r\n            [/#/, 'string.$S2.escape', '@interpolated'],\r\n            [/\\\\$/, 'string.$S2.escape'],\r\n            [/@escapes/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.escape.invalid'],\r\n            [/[`\"]/, {\r\n                    cases: {\r\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@pop' },\r\n                        '@default': 'string.$S2'\r\n                    }\r\n                }]\r\n        ],\r\n        // literal documents\r\n        // heredoc.<close> where close is the closing delimiter\r\n        heredoc: [\r\n            [/^(\\s*)(@heredelim)$/, {\r\n                    cases: {\r\n                        '$2==$S2': ['string.heredoc', { token: 'string.heredoc.delimiter', next: '@pop' }],\r\n                        '@default': ['string.heredoc', 'string.heredoc']\r\n                    }\r\n                }],\r\n            [/.*/, 'string.heredoc'],\r\n        ],\r\n        // interpolated sequence\r\n        interpolated: [\r\n            [/\\$\\w*/, 'global.constant', '@pop'],\r\n            [/@\\w*/, 'namespace.class.identifier', '@pop'],\r\n            [/@@\\w*/, 'namespace.instance.identifier', '@pop'],\r\n            [/[{]/, { token: 'string.escape.curly', switchTo: '@interpolated_compound' }],\r\n            ['', '', '@pop'],\r\n        ],\r\n        // any code\r\n        interpolated_compound: [\r\n            [/[}]/, { token: 'string.escape.curly', next: '@pop' }],\r\n            { include: '@root' },\r\n        ],\r\n        // %r quoted regexp\r\n        // pregexp.<open>.<close> where open/close are the open/close delimiter\r\n        pregexp: [\r\n            { include: '@whitespace' },\r\n            // turns out that you can quote using regex control characters, aargh!\r\n            // for example; %r|kgjgaj| is ok (even though | is used for alternation)\r\n            // so, we need to match those first\r\n            [/[^\\(\\{\\[\\\\]/, {\r\n                    cases: {\r\n                        '$#==$S3': { token: 'regexp.delim', next: '@pop' },\r\n                        '$#==$S2': { token: 'regexp.delim', next: '@push' },\r\n                        '~[)}\\\\]]': '@brackets.regexp.escape.control',\r\n                        '~@regexpctl': 'regexp.escape.control',\r\n                        '@default': 'regexp'\r\n                    }\r\n                }],\r\n            { include: '@regexcontrol' },\r\n        ],\r\n        // We match regular expression quite precisely\r\n        regexp: [\r\n            { include: '@regexcontrol' },\r\n            [/[^\\\\\\/]/, 'regexp'],\r\n            ['/[ixmp]*', { token: 'regexp.delim' }, '@pop'],\r\n        ],\r\n        regexcontrol: [\r\n            [/(\\{)(\\d+(?:,\\d*)?)(\\})/, ['@brackets.regexp.escape.control', 'regexp.escape.control', '@brackets.regexp.escape.control']],\r\n            [/(\\[)(\\^?)/, ['@brackets.regexp.escape.control', { token: 'regexp.escape.control', next: '@regexrange' }]],\r\n            [/(\\()(\\?[:=!])/, ['@brackets.regexp.escape.control', 'regexp.escape.control']],\r\n            [/\\(\\?#/, { token: 'regexp.escape.control', next: '@regexpcomment' }],\r\n            [/[()]/, '@brackets.regexp.escape.control'],\r\n            [/@regexpctl/, 'regexp.escape.control'],\r\n            [/\\\\$/, 'regexp.escape'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/\\\\\\./, 'regexp.invalid'],\r\n            [/#/, 'regexp.escape', '@interpolated'],\r\n        ],\r\n        regexrange: [\r\n            [/-/, 'regexp.escape.control'],\r\n            [/\\^/, 'regexp.invalid'],\r\n            [/\\\\$/, 'regexp.escape'],\r\n            [/@regexpesc/, 'regexp.escape'],\r\n            [/[^\\]]/, 'regexp'],\r\n            [/\\]/, '@brackets.regexp.escape.control', '@pop'],\r\n        ],\r\n        regexpcomment: [\r\n            [/[^)]+/, 'comment'],\r\n            [/\\)/, { token: 'regexp.escape.control', next: '@pop' }]\r\n        ],\r\n        // % quoted strings\r\n        // A bit repetitive since we need to often special case the kind of ending delimiter\r\n        pstring: [\r\n            [/%([qws])\\(/, { token: 'string.$1.delim', switchTo: '@qstring.$1.(.)' }],\r\n            [/%([qws])\\[/, { token: 'string.$1.delim', switchTo: '@qstring.$1.[.]' }],\r\n            [/%([qws])\\{/, { token: 'string.$1.delim', switchTo: '@qstring.$1.{.}' }],\r\n            [/%([qws])</, { token: 'string.$1.delim', switchTo: '@qstring.$1.<.>' }],\r\n            [/%([qws])(@delim)/, { token: 'string.$1.delim', switchTo: '@qstring.$1.$2.$2' }],\r\n            [/%r\\(/, { token: 'regexp.delim', switchTo: '@pregexp.(.)' }],\r\n            [/%r\\[/, { token: 'regexp.delim', switchTo: '@pregexp.[.]' }],\r\n            [/%r\\{/, { token: 'regexp.delim', switchTo: '@pregexp.{.}' }],\r\n            [/%r</, { token: 'regexp.delim', switchTo: '@pregexp.<.>' }],\r\n            [/%r(@delim)/, { token: 'regexp.delim', switchTo: '@pregexp.$1.$1' }],\r\n            [/%(x|W|Q?)\\(/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.(.)' }],\r\n            [/%(x|W|Q?)\\[/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.[.]' }],\r\n            [/%(x|W|Q?)\\{/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.{.}' }],\r\n            [/%(x|W|Q?)</, { token: 'string.$1.delim', switchTo: '@qqstring.$1.<.>' }],\r\n            [/%(x|W|Q?)(@delim)/, { token: 'string.$1.delim', switchTo: '@qqstring.$1.$2.$2' }],\r\n            [/%([rqwsxW]|Q?)./, { token: 'invalid', next: '@pop' }],\r\n            [/./, { token: 'invalid', next: '@pop' }],\r\n        ],\r\n        // non-expanded quoted string.\r\n        // qstring.<kind>.<open>.<close>\r\n        //  kind = q|w|s  (single quote, array, symbol)\r\n        //  open = open delimiter\r\n        //  close = close delimiter\r\n        qstring: [\r\n            [/\\\\$/, 'string.$S2.escape'],\r\n            [/\\\\./, 'string.$S2.escape'],\r\n            [/./, {\r\n                    cases: {\r\n                        '$#==$S4': { token: 'string.$S2.delim', next: '@pop' },\r\n                        '$#==$S3': { token: 'string.$S2.delim', next: '@push' },\r\n                        '@default': 'string.$S2'\r\n                    }\r\n                }],\r\n        ],\r\n        // expanded quoted string.\r\n        // qqstring.<kind>.<open>.<close>\r\n        //  kind = Q|W|x  (double quote, array, command)\r\n        //  open = open delimiter\r\n        //  close = close delimiter\r\n        qqstring: [\r\n            [/#/, 'string.$S2.escape', '@interpolated'],\r\n            { include: '@qstring' }\r\n        ],\r\n        // whitespace & comments\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/^\\s*=begin\\b/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^=]+/, 'comment'],\r\n            [/^\\s*=begin\\b/, 'comment.invalid'],\r\n            [/^\\s*=end\\b.*/, 'comment', '@pop'],\r\n            [/[=]/, 'comment']\r\n        ],\r\n    }\r\n};\r\n"]}